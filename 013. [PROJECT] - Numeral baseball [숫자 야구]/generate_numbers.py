from random import randint

def generate_numbers():
    numbers = []
    while (len(numbers) < 3):
            # numbers 리스트의 길이가 3보다 작은 동안 반복문을 수행한다.
            # while문은 조건이 False인 경우에도 최초 1회 실행되므로, 이와 같은 조건을 설정하였다.

        tmp = randint(0, 9)
                # 랜덤 정수를 검증하기 위해 바로 리스트에 추가하지 않고 tmp 변수에 임시저장하였다.
        if tmp not in numbers:
            numbers.append(tmp)
                # numbers 리스트에 임시 랜덤 정수가 존재하지 않는 경우 추가하도록 하였다.
                # 이런 조건문을 설정하면서 'tmp in numbers' 즉, 리스트에 이미 존재하는 경우에 대한 동작을 설정하는 것보다
                # 존재하지 않을때(우리가 생각하는 정상적인 동작일 때)의 동작을 설정해주는 것이 더 명확한 코드임을 깨닫게 됐다.

    print("0과 9 사이의 서로 다른 숫자 3개를 랜덤한 순서로 뽑았습니다.\n")
    return numbers

''' ------ 동작 설명 ------
1. 함수가 호출되면 numbers의 원소가 3개가 될 때까지 반복 수행한다.
2. 각 반복문에서는 임의의 랜덤 정수 하나를 선정하고, tmp라는 임시변수에 넣어 중복여부를 판별한다.
3. 중복된 랜덤정수가 아닌 경우에는 numbers 리스트에 추가한다.

 ------ 깨달은 점 ------
 
 지금까지 코드를 작성하며 '의도하지 않은 상황이 발생했을 때의 동작'에 대해 if문의 수행부에 작성했었다.
 그러다보니 break나 continue를 이용했는데, 결과가 정확하지 않은 때도 있었다.
 오늘 이 코드를 작성하다보니 우리가 진행하려하지않는 상황에 대해서는 그냥 동작이 안되고 반복문이 계속 흘러가게 두는 것,
 즉 조건을 '의도한 상황이 발생했을 때의 동작'으로 설정하는 것이 훨씬 명확하고 깔끔하다는 걸 불현듯 깨닫게 됐다.
 '''
